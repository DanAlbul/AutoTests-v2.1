{"name": "test_public_or_private_save[kair317@gmail.com-1234567-Non-existing note]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"link text\",\"selector\":\"Non-existing note\"}\n  (Session info: chrome=75.0.3770.100)", "trace": "self = <anotepad_tests.TestClass object at 0x0445BAF0>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"eeb559cb7ea0b36249ab1044f06e40b9\")>\nemail = 'kair317@gmail.com', password = '1234567', note = 'Non-existing note'\n\n    @allure.testcase(TC_LINK, \"Test Case: GL-805:Saving notes as 'Private' or 'Public' (only for registered users)\")\n    @allure.feature(\"Saving notes with Public or Private access\")\n    @pytest.mark.parametrize(\n        'email, password, note', [\n            ('kair317@gmail.com', '1234567', 'FNote 3'),            # valid note ... Expected: PASS\n            ('kair317@gmail.com', '1234567', 'Non-existing note')   # invalid note ... Expected: FAIL\n        ]\n    )\n    def test_public_or_private_save(self, browser, email, password, note):\n        browser.get(AUT_LINK)\n        browser.maximize_window()\n    \n        login = Login(browser)\n        login.login(email, password)\n        login.login_assertion()\n    \n        home_page = HomePage(browser)\n        # public\n>       home_page.select_note(note)\n\nanotepad_tests.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\Home_page.py:17: in select_note\n    self.browser.find_element_by_link_text(note).click()\nc:\\users\\admin\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:428: in find_element_by_link_text\n    return self.find_element(by=By.LINK_TEXT, value=link_text)\nc:\\users\\admin\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:978: in find_element\n    'value': value})['value']\nc:\\users\\admin\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0436C950>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x771C58ED+253]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x771C58BD+205]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"link text\",\"selector\":\"Non-existing note\"}\nE         (Session info: chrome=75.0.3770.100)\n\nc:\\users\\admin\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchElementException"}, "steps": [{"name": "Login into the system", "status": "passed", "parameters": [{"name": "email", "value": "'kair317@gmail.com'"}, {"name": "password", "value": "'1234567'"}], "start": 1561641958726, "stop": 1561641961383}, {"name": "Check that login was successful", "status": "passed", "start": 1561641961383, "stop": 1561641961398}, {"name": "Select a note", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"link text\",\"selector\":\"Non-existing note\"}\n  (Session info: chrome=75.0.3770.100)\n\n", "trace": "  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\allure_commons\\_allure.py\", line 153, in impl\n    return func(*a, **kw)\n  File \"F:\\projects\\Homework3\\Pages\\Home_page.py\", line 17, in select_note\n    self.browser.find_element_by_link_text(note).click()\n  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 428, in find_element_by_link_text\n    return self.find_element(by=By.LINK_TEXT, value=link_text)\n  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 978, in find_element\n    'value': value})['value']\n  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "parameters": [{"name": "note", "value": "'Non-existing note'"}], "start": 1561641961398, "stop": 1561641961439}], "parameters": [{"name": "email", "value": "'kair317@gmail.com'"}, {"name": "password", "value": "'1234567'"}, {"name": "note", "value": "'Non-existing note'"}], "start": 1561641954267, "stop": 1561641961443, "uuid": "3b802032-1d0f-4d1d-99c6-30f36323c7e5", "historyId": "b7e8406f81fe81b33754831cf547f67f", "fullName": "anotepad_tests.TestClass#test_public_or_private_save[kair317@gmail.com-1234567-Non-existing note]", "labels": [{"name": "feature", "value": "Saving notes with Public or Private access"}, {"name": "parentSuite"}, {"name": "suite", "value": "anotepad_tests"}, {"name": "subSuite", "value": "TestClass"}, {"name": "host", "value": "admin-ПК"}, {"name": "thread", "value": "5056-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "anotepad_tests"}], "links": [{"type": "test_case", "url": "http://52.169.88.152/lib/testcases/tcPrint.php?show_mode=&testcase_id=4567&tcversion_id=4568", "name": "Test Case: GL-805:Saving notes as 'Private' or 'Public' (only for registered users)"}]}